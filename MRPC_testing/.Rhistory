line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
l<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
a<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
b<-as.vector(as.numeric(line_edit))
dataset_0[[i]]<-list(l,a,b)
}
temp<-as.data.frame(dataset_0[[10]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
suffStat<- list(C=cor(temp),n=nrow(temp))
MRPC.fit <- MRPC(temp,
suffStat = suffStat,
GV = 1,
FDR = 0.05,
indepTest = 'gaussCItest',
labels = colnames(temp),
FDRcontrol = 'LOND',
verbose = FALSE)
dataset_0<- vector("list", 1000)
con = file("../yeast_residual_data_full_1000_gt_1.txt", "r")
for (i in 1:1000)
{
line = readLines(con, n = 1)
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
l<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
a<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
b<-as.vector(as.numeric(line_edit))
dataset_0[[i]]<-list(l,a,b)
}
dataset_0<- vector("list", 1000)
con = file("../yeast_residual_data_full_1000_gt_1.txt", "r")
setwd("~/projects/CIT_Non_Linear/MRPC_testing")
dataset_0<- vector("list", 1000)
con = file("../yeast_residual_data_full_1000_gt_1.txt", "r")
for (i in 1:1000)
{
line = readLines(con, n = 1)
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
l<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
a<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
b<-as.vector(as.numeric(line_edit))
dataset_0[[i]]<-list(l,a,b)
}
temp<-as.data.frame(dataset_0[[10]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
suffStat<- list(C=cor(temp),n=nrow(temp))
MRPC.fit <- MRPC(temp,
suffStat = suffStat,
GV = 1,
FDR = 0.05,
indepTest = 'gaussCItest',
labels = colnames(temp),
FDRcontrol = 'LOND',
verbose = FALSE)
as(MRPC.fit@graph,"matrix")
pc.fit <- pc(suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(temp),
verbose = FALSE)
library(bnlearn)
pc.fit <- pc(suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(temp),
verbose = FALSE)
library(pcalg)
pc.fit <- pc(suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(temp),
verbose = FALSE)
as(pc.fit@graph,"matrix")
choose_algo <- function(name,genedata)
{
obj<-NULL
suffStat<- list(C=cor(genedata),n=nrow(genedata))
if(name=="MRPC")
obj<- MRPC(temp,
suffStat = suffStat,
GV = 1,
FDR = 0.05,
indepTest = 'gaussCItest',
labels = colnames(genedata),
FDRcontrol = 'LOND',
verbose = FALSE)
else if(name=="PC")
obj <- pc(suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(genedata),
verbose = FALSE)
}
#suffStat<- list(C=cor(temp),n=nrow(temp))
choose_algo("MRPC",temp)
choose_algo <- function(name,genedata)
{
obj<-NULL
suffStat<- list(C=cor(genedata),n=nrow(genedata))
if(name=="MRPC")
obj<- MRPC(temp,
suffStat = suffStat,
GV = 1,
FDR = 0.05,
indepTest = 'gaussCItest',
labels = colnames(genedata),
FDRcontrol = 'LOND',
verbose = FALSE)
else if(name=="PC")
obj <- pc(suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(genedata),
verbose = FALSE)
print(as(obj@graph,"matrix"))
}
#suffStat<- list(C=cor(temp),n=nrow(temp))
choose_algo("MRPC",temp)
#suffStat<- list(C=cor(temp),n=nrow(temp))
choose_algo("PC",temp)
temp<-as.data.frame(dataset_0[[1]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
#suffStat<- list(C=cor(temp),n=nrow(temp))
choose_algo("PC",temp)
#suffStat<- list(C=cor(temp),n=nrow(temp))
choose_algo("MRPC",temp)
#suffStat<- list(C=cor(temp),n=nrow(temp))
res<-choose_algo("MRPC",temp)
res
res[1][1]
res[1][2]
res[[1]]
res[[1]][2]
res
res[1,1]
res[1,2]
res[1,3]
res
res[2,2]
read_data<-function(path)
{
dataset<- vector("list", 1000)
con = file(path, "r")
for (i in 1:1000)
{
line = readLines(con, n = 1)
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
l<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
a<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
b<-as.vector(as.numeric(line_edit))
dataset[[i]]<-list(l,a,b)
}
return dataset
}
dataset<- vector("list", 1000)
read_data<-function(path)
{
dataset<- vector("list", 1000)
con = file(path, "r")
for (i in 1:1000)
{
line = readLines(con, n = 1)
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
l<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
a<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
b<-as.vector(as.numeric(line_edit))
dataset[[i]]<-list(l,a,b)
}
return dataset
}
library(MRPC)
library(pcalg)
library(bnlearn)
read_data<-function(path)
{
dataset<- vector("list", 1000)
con = file(path, "r")
for (i in 1:1000)
{
line = readLines(con, n = 1)
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
l<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
a<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
b<-as.vector(as.numeric(line_edit))
dataset[[i]]<-list(l,a,b)
}
return (dataset)
}
dataset_0<- read_data("../yeast_residual_data_full_1000_gt_2.txt")#gnd truth 0
dataset_1<- read_data("../yeast_residual_data_full_1000_gt_1.txt") #gnd truth 1
perform_theTest<-function(dataset,n)
{
#for(i in 1:n)
#{
temp<-as.data.frame(dataset_0[[n]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
#}
res<-choose_algo("MRPC",temp)
flat<-as.vector(res)
print(flat)
}
perform_theTest(dataset_0,1,"MRPC")
perform_theTest<-function(dataset,n,test)
{
#for(i in 1:n)
#{
temp<-as.data.frame(dataset_0[[n]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
#}
res<-choose_algo(test,temp)
flat<-as.vector(res)
print(flat)
}
perform_theTest(dataset_0,1,"MRPC")
choose_algo <- function(name,genedata)
{
obj<-NULL
suffStat<- list(C=cor(genedata),n=nrow(genedata))
if(name=="MRPC")
obj<- MRPC(temp,
suffStat = suffStat,
GV = 1,
FDR = 0.05,
indepTest = 'gaussCItest',
labels = colnames(genedata),
FDRcontrol = 'LOND',
verbose = FALSE)
else if(name=="PC")
obj <- pc(suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(genedata),
verbose = FALSE)
return (as(obj@graph,"matrix"))
}
perform_theTest(dataset_0,1,"MRPC")
perform_theTest<-function(dataset,n,test)
{
#for(i in 1:n)
#{
temp<-as.data.frame(dataset[[n]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
#}
res<-choose_algo(test,temp)
flat<-as.vector(res)
print(flat)
}
choose_algo <- function(name,genedata)
{
obj<-NULL
suffStat<- list(C=cor(genedata),n=nrow(genedata))
if(name=="MRPC")
obj<- MRPC(genedata,
suffStat = suffStat,
GV = 1,
FDR = 0.05,
indepTest = 'gaussCItest',
labels = colnames(genedata),
FDRcontrol = 'LOND',
verbose = FALSE)
else if(name=="PC")
obj <- pc(suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(genedata),
verbose = FALSE)
return (as(obj@graph,"matrix"))
}
perform_theTest<-function(dataset,n,test)
{
#for(i in 1:n)
#{
temp<-as.data.frame(dataset[[n]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
#}
res<-choose_algo(test,temp)
flat<-as.vector(res)
print(flat)
}
perform_theTest(dataset_0,1,"MRPC")
perform_theTest(dataset_0,2,"MRPC")
perform_theTest(dataset_0,10,"MRPC")
perform_theTest<-function(dataset,n,test)
{
#for(i in 1:n)
#{
temp<-as.data.frame(dataset[[n]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
#}
res<-choose_algo(test,temp)
flat<-as.vector(t(res))
print(flat)
}
perform_theTest(dataset_0,10,"MRPC")
perform_theTest(dataset_0,10,"PC")
perform_theTest(dataset_0,10,"PC")
choose_algo <- function(name,genedata)
{
obj<-NULL
suffStat<- list(C=cor(genedata),n=nrow(genedata))
if(name=="MRPC")
obj<- MRPC(genedata,
suffStat = suffStat,
GV = 1,
FDR = 0.05,
indepTest = 'gaussCItest',
labels = colnames(genedata),
FDRcontrol = 'LOND',
verbose = FALSE)
else if(name=="PC")
obj <- pc(suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(genedata),
verbose = FALSE)
plot(obj,
main ="(C) pc")
return (as(obj@graph,"matrix"))
}
perform_theTest(dataset_0,10,"PC")
perform_theTest(dataset_0,10,"MRPC")
perform_theTest<-function(dataset,n,test)
{
finalresult<-vector("list",1000)
#for(i in 1:n)
#{
temp<-as.data.frame(dataset[[n]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
#}
res<-choose_algo(test,temp)
flat<-as.vector(t(res))
finalresult[[n]]<-flat
return (finalresult)
}
result<-perform_theTest(dataset_0,10,"MRPC",finalresult)
result<-perform_theTest(dataset_0,10,"MRPC")
print(result)
result[[i]]
result[[10]]
perform_theTest<-function(dataset,n,test)
{
finalresult<-vector("list",n)
for(i in 1:n)
{
temp<-as.data.frame(dataset[[i]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
res<-choose_algo(test,temp)
flat<-as.vector(t(res))
finalresult[[i]]<-flat
}
return (finalresult)
}
result<-perform_theTest(dataset_0,5,"MRPC")
print(result)
as.data.frame(result)
matrix(result)
matrix(unlist(result))
as.dataframe(matrix(unlist(result)))
as.data.frame(matrix(unlist(result)))
as.data.frame(matrix(unlist(result)))
do.call(rbind,result)
finalmatrix<-do.call(rbind,result)
colnames(finalmatrix)
colnames(finalmatrix)<-c(1,2,3,4,5,6,7,8,9)
as.data.frame(finalmatrix)
finalmatrix<-as.data.frame(do.call(rbind,result))
View(finalmatrix)
colnames(finalmatrix)<-c("L->L","L->A","L->B","A->L","A->A","A->B","B->L","B->A","B->B")
result<-perform_theTest(eval("dataset_"+str(datanumber)),5,test)
test="MRPC"
datanumber=0
result<-perform_theTest(eval("dataset_"+str(datanumber)),5,test)
result<-perform_theTest(eval(paste("dataset_"+str(datanumber))),5,test)
result<-perform_theTest(eval(paste("dataset_",str(datanumber))),5,test)
result<-perform_theTest(paste("dataset_",str(datanumber)),5,test)
result<-perform_theTest(paste("dataset_",datanumber),5,test)
result<-perform_theTest(dataset_0,5,test)
finalmatrix<-specifytest(datanumber,test,5)
specifytest<-function(datanumber,test,n)
{
result<-NULL
if(datanumber==1)
result<-perform_theTest(dataset_1,n,test)
else if(datanumber==0)
result<-perform_theTest(dataset_0,n,test)
finalmatrix<-as.data.frame(do.call(rbind,result))
colnames(finalmatrix)<-c("L->L","L->A","L->B","A->L","A->A","A->B","B->L","B->A","B->B")
return (finalmatrix)
}
finalmatrix<-specifytest(datanumber,test,5)
View(finalmatrix)
?paste
?paste
filename=paste(test,"truth",str(datanumber),"numberofdata",sep="_")
filename=paste(test,"truth",str(datanumber),"numberofdata",n,sep="_")
filename=paste(test,"truth",str(datanumber),"numberofdata",5,sep="_")
n=5
finalmatrix<-specifytest(datanumber,test,n)
choose_algo <- function(name,genedata)
{
obj<-NULL
suffStat<- list(C=cor(genedata),n=nrow(genedata))
if(name=="MRPC")
obj<- MRPC(genedata,
suffStat = suffStat,
GV = 1,
FDR = 0.05,
indepTest = 'gaussCItest',
labels = colnames(genedata),
FDRcontrol = 'LOND',
verbose = FALSE)
else if(name=="PC")
obj <- pc(suffStat = suffStat,
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(genedata),
verbose = FALSE)
return (as(obj@graph,"matrix"))
}
finalmatrix<-specifytest(datanumber,test,n)
finalmatrix<-specifytest(datanumber,test,n)
filename=paste(test,"truth",datanumber,"numberofdata",5,sep="_")
?write.csv
test="PC"
datanumber=0
n=5
finalmatrix<-specifytest(datanumber,test,n)
filename=paste(test,"truth",datanumber,"numberofdata",5,sep="_")
write.csv(finalmatrix,filename,row.names = FALSE)
test="PC"
datanumber=1
n=5
finalmatrix<-specifytest(datanumber,test,n)
filename=paste(test,"truth",datanumber,"numberofdata",5,sep="_")
write.csv(finalmatrix,filename,row.names = FALSE)
test="MRPC"
datanumber=1
n=5
finalmatrix<-specifytest(datanumber,test,n)
filename=paste(test,"truth",datanumber,"numberofdata",5,sep="_")
write.csv(finalmatrix,filename,row.names = FALSE)
test="MRPC"
datanumber=0
n=5
finalmatrix<-specifytest(datanumber,test,n)
filename=paste(test,"truth",datanumber,"numberofdata",5,sep="_")
write.csv(finalmatrix,filename,row.names = FALSE)
test="MRPC"
datanumber=0
n=5
finalmatrix<-specifytest(datanumber,test,n)
filename=paste(test,"truth",datanumber,"numberofdata",n,".csv",sep="_")
write.csv(finalmatrix,filename,row.names = FALSE)
datanumber=1
n=5
finalmatrix<-specifytest(datanumber,test,n)
filename=paste(test,"truth",datanumber,"numberofdata",n,".csv",sep="_")
write.csv(finalmatrix,filename,row.names = FALSE)
test="PC"
datanumber=1
n=5
finalmatrix<-specifytest(datanumber,test,n)
filename=paste(test,"truth",datanumber,"numberofdata",n,".csv",sep="_")
write.csv(finalmatrix,filename,row.names = FALSE)
datanumber=0
n=5
finalmatrix<-specifytest(datanumber,test,n)
filename=paste(test,"truth",datanumber,"numberofdata",n,".csv",sep="_")
write.csv(finalmatrix,filename,row.names = FALSE)
test="PC"
datanumber=0
n=10
finalmatrix<-specifytest(datanumber,test,n)
filename=paste(test,"truth",datanumber,"numberofdata",n,".csv",sep="_")
write.csv(finalmatrix,filename,row.names = FALSE)
tests<-c("MRPC","PC")
datanumbers<-c(0,1)
n=10
tests<-c("MRPC","PC")
datanumbers<-c(0,1)
n=10
for(i in tests)
{
for(j in datanumbers)
{
finalmatrix<-specifytest(j,i,n)
filename=paste(i,"truth",j,"numberofdata",n,".csv",sep="_")
write.csv(finalmatrix,filename,row.names = FALSE)
}
}
source('~/projects/CIT_Non_Linear/MRPC_testing/mrpc_run.R')
source('~/projects/CIT_Non_Linear/MRPC_testing/mrpc_run.R')
source('~/projects/CIT_Non_Linear/MRPC_testing/mrpc_run.R')
