df = as.data.frame(cbind(L,A,B))
ggplot(df, aes(A,B,color=L)) + geom_point()
ggplot(df, aes(A,B,color=L)) + geom_point() + stat_smooth(method="lm")
library(cit)
install.packages("cit")
library(cit)
cit.cp(L, A, B)
Bresid = resid(lm(B ~ A))
df = as.data.frame(cbind(L,A,B,Bresid))
ggplot(df, aes(A,Bresid,color=L)) + geom_point()
Bresid2 = B - 8*sin(A)
df = as.data.frame(cbind(L,A,B,Bresid, Bresid2))
ggplot(df, aes(A,Bresid2,color=L)) + geom_point()
A = -2 + 3*L - rnorm(1000,0,1)
B = -5 + 8*sin(A) + rnorm(1000,0,0.5)
df = as.data.frame(cbind(L,A,B))
ggplot(df, aes(A,B,color=L)) + geom_point()
ggplot(df, aes(A,B,color=L)) + geom_point() + stat_smooth(method="lm")
cit.cp(L, A, B)
Bresid = resid(lm(B ~ A))
df = as.data.frame(cbind(L,A,B,Bresid))
ggplot(df, aes(A,Bresid,color=L)) + geom_point() + stat_smooth(method="lm")
ggplot(df, aes(A,Bresid,color=L)) + geom_point() + stat_smooth(method="lm", aes(group=L))
ggplot(df, aes(A,Bresid,color=L)) + geom_point() + stat_smooth(method="lm")
B,Bresid, Bresid2))
cit.cp(L[1:100], A[1:100], B[1:100])
Bresid2 = B - 8*sin(A)
summary(lm(Bresid2 ~ L))
summary(lm(Bresid2[1:100] ~ L[1:100]))
ggplot(df, aes(A,Bresid2,color=L)) + geom_point() + stat_smooth(method="lm")
ggplot(df, aes(A[1:100],Bresid2[1:100],color=L)) + geom_point() + stat_smooth(method="lm")
ggplot(df, aes(a[1:100],Bresid2[1:100],color=L)) + geom_point() + stat_smooth(method="lm")
ggplot(df[1:100,], aes(A,Bresid2,color=L)) + geom_point() + stat_smooth(method="lm")
2,color=L)) + geom_point() + stat_smooth(method="lm")
head(df)
df = as.data.frame(cbind(L,A,B,Bresid, Bresid2))
ggplot(df[1:100,], aes(A,Bresid2,color=L)) + geom_point() + stat_smooth(method="lm")
ggplot(df[1:100,], aes(A,Bresid,color=L)) + geom_point() + stat_smooth(method="lm")
ggplot(df[1:100,], aes(L,Bresid)) + geom_point() + stat_smooth(method="lm")
df$L = as.factor(df$L)
ggplot(df[1:100,], aes(L,Bresid)) + geom_point() + stat_smooth(method="lm")
ggplot(df[1:100,], aes(L,Bresid)) + geom_boxplot() + stat_smooth(method="lm")
ggplot(df[1:100,], aes(L,Bresid)) + geom_boxplot(notch=TRUE) + stat_smooth(method="lm")
ggplot(df[sample(nrow(df),100),], aes(L,Bresid)) + geom_boxplot(notch=TRUE) + stat_smooth(method="lm")
ggplot(df, aes(L,Bresid)) + geom_boxplot(notch=TRUE) + stat_smooth(method="lm")
Bresid = resid(lm(df$B ~ df$A))
df$Bresid = Bresid
ggplot(df, aes(L,Bresid)) + geom_boxplot(notch=TRUE) + stat_smooth(method="lm")
ggplot(df, aes(A,Bresid,color=L)) + geom_point() + stat_smooth(method="lm")
ggplot(df, aes(A,Bresid,color=L)) + geom_point() + stat_smooth(method="lm", aes(group=1))
ggplot(df, aes(L,Bresid)) + geom_boxplot(notch=TRUE) + stat_smooth(method="lm")
ggplot(df, aes(L,Bresid2)) + geom_boxplot(notch=TRUE) + stat_smooth(method="lm")
ggplot(df, aes(L,Bresid)) + geom_boxplot(notch=TRUE) + stat_smooth(method="lm")
cit.cp(L,A,B)
with(df[1:100,], cit.cp(L,A,B))
with(df[1:200,], cit.cp(L,A,B))
with(df[1:300,], cit.cp(L,A,B))
with(df[sample(nrow(df), 50),], cit.cp(L,A,B))
ggplot(df, aes(A,B,color=L)) + geom_point() + stat_smooth(method="lm"
)
with(df[1:50,], cit.cp(L,A,B))
ggplot(df[1:50,], aes(A,B,color=L)) + geom_point() + stat_smooth(method="lm")
with(df[1:100,], cor.test(A[L==0], B[L==0]))
with(df[1:100,], cor.test(A[L==1], B[L==1]))
with(df[1:50,], cor.test(A[L==1], B[L==1]))
with(df[1:50,], cor.test(A[L==0], B[L==0]))
with(df[1:100,], cit.cp(L,A,B))
fit0 = with(df[1:100,], lm(B ~ A))
fit1 = with(df[1:100,], lm(B ~ A + L))
anova(fit0, fit1)
rm(L)
rm(A)
rm(B)
fit1 = with(df[1:100,], lm(B ~ A + L))
fit0 = with(df[1:100,], lm(B ~ A))
anova(fit0, fit1)
lm(B ~ A + L, data=df[1:100,])
fit1 = lm(B ~ A + L, data=df[1:100,])
fit0 = lm(B ~ A, data=df[1:100,])
anova(fit0, fit1)
fit0 = lm(B ~ L, data=df[1:100,])
anova(fit0, fit1)
summary(fit0)
summary(fit1)
plot(fit1)
plot(fit0)
ggplot(df[1:50,], aes(A,B,color=L)) + geom_point() + stat_smooth(method="lm")
savehistory(file="debugging.cit.nlmr.Rhist")
plot(A,B)
ggplot(A,B) + geom_point() + stat_smooth(method="lm")
library(ggplot2)
ggplot(A,B) + geom_point() + stat_smooth(method="lm")
plot(A,B)
temp<-as.data.frame(dataset_linear[[268]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B")
)
temp<-as.data.frame(dataset_linear[[268]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
L<-temp[,1]
A<-temp[,2]
B<-temp[,3]
cit.cp(L,A,B)
plot(A,B)
plot(A,B)+lm(B~A)
df=cbind(L,A,B)
ggplot(df,aes(A,B))+geom_point()
df=as.data.frame(df)
ggplot(df,aes(A,B))+geom_point()
ggplot(df,aes(A,B))+geom_point()+stat_smooth(method="lm")
ggplot(df,aes(A,B))+stat_smooth(method="lm")
ggplot(df,aes(A,B))+geom_pointstat_smooth(method="lm")
ggplot(df,aes(A,B))+geom_point+stat_smooth(method="lm")
ggplot(df,aes(A,B))+geom_point()+stat_smooth(method="lm")
temp<-as.data.frame(dataset_linear[[258]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
L<-temp[,1]
A<-temp[,2]
B<-temp[,3]
df=cbind(L,A,B)
df=as.data.frame(df)
ggplot(df,aes(A,B))+geom_point()+stat_smooth(method="lm")
lm(B~A)
temp<-as.data.frame(dataset_linear[[268]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
L<-temp[,1]
A<-temp[,2]
B<-temp[,3]
df=cbind(L,A,B)
df=as.data.frame(df)
lm(B~A)
temp<-as.data.frame(dataset_linear[[258]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
L<-temp[,1]
A<-temp[,2]
B<-temp[,3]
df=cbind(L,A,B)
df=as.data.frame(df)
lm(B~A)
plot(L,A)
plot(L,B)
boxplot(L,A)
boxplot(L,B)
plot(L,A)
boxplot(L,A)
?boxplot
boxplot(A~L)
boxplot(B~L)
boxplot(B~L)
temp<-as.data.frame(dataset_linear[[558]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
temp
L<-temp[,1]
A<-temp[,2]
B<-temp[,3]
df=cbind(L,A,B)
df=as.data.frame(df)
ggplot(df,aes(A,B))+geom_point()+stat_smooth(method="lm")
lm(B~A)
temp<-as.data.frame(dataset_linear[[893]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
L<-temp[,1]
A<-temp[,2]
B<-temp[,3]
df=cbind(L,A,B)
df=as.data.frame(df)
ggplot(df,aes(A,B))+geom_point()+stat_smooth(method="lm")
lm(B~A)
library(MRPC)
MRPC(df)
talbe(L)
table(L)
table(A)
table(L)
indices_used<-read_pickle_file("../../thirdApproach/indicesUsedIndependent.pkl")
setwd("~/projects/CIT_Non_Linear/LinearDifferentvalues/CIT_testing")
indices_used<-read_pickle_file("../../thirdApproach/indicesUsedIndependent.pkl")
library(reticulate)
indices_used<-read_pickle_file("../../thirdApproach/indicesUsedIndependent.pkl")
source_python("pickle_reader.py")
indices_used<-read_pickle_file("../../thirdApproach/indicesUsedIndependent.pkl")
inputs=209157
read_data<-function(path)
{
dataset<- vector("list", inputs)
con = file(path, "r")
for (i in 1:inputs)
{
line = readLines(con, n = 1)
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
l<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
a<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
b<-as.vector(as.numeric(line_edit))
dataset[[i]]<-list(l,a,b)
}
close(con)
return (dataset)
}
#dataset_linear<- read_data("../../yeast_residual_data_full_1000_gt_1.txt")
dataset_yeast<- read_data("../../../yeast_full_data/yeast_residual_data_full_209k_gt2.txt ")
#dataset_linear<- read_data("../../yeast_residual_data_full_1000_gt_1.txt")
dataset_yeast<- read_data("../../../yeast_full_data/yeast_residual_data_full_209k_gt2.txt")
#adding +1 since R is 1 indexed
indices_used<-indices_used+1
dataset_linear<- dataset_yeast[indices_used[1:10000]]
p_cit<-numeric(inputs)
p_cit[1:inputs]=-1
p_TL<- numeric(inputs)
p_TL[1:inputs]=-1
p_TG<- numeric(inputs)
p_TG[1:inputs]=-1
p_GL<- numeric(inputs)
p_GL[1:inputs]=-1
p_Lind<- numeric(inputs)
p_Lind[1:inputs]=-1
p_res<-character(inputs)
p_res[1:inputs]="NA"
for(i in 1:inputs)
{
print(i)
try(
{
temp<-as.data.frame(dataset_linear[[i]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
L<-temp[,1]
A<- temp[,2]
B<- temp[,3]
t<-cit.cp(L,A,B)
#t<-cit.cp(L,B,A)
p_cit[i]<-t[1]
p_TL[i]<-t[2]
p_TG[i]<-t[3]
p_GL[i]<-t[4]
p_Lind[i]<-t[5]
if( t[1]<0.05)
{
p_res[i]<-"causal"
}
else
p_res[i]<-" "
}
)}
p_cit[10001]
p_cit[10000]
p_cit[1:10000]
p_cit<-p_cit[1:10000]
p_GL<-p_GL[1:10000]
p_Lind<-p_Lind[1:10000]
p_res<-p_res[1:10000]
p_TG<-p_TG[1:10000]
p_TL<-p_TL[1:10000]
df <- data.frame(p_cit,p_TL,p_TG,p_GL,p_Lind,p_res)
write.csv(df,"result_yeast10kindep.csv",row.names=FALSE)
temp<-as.data.frame(dataset_linear[[558]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
L<-temp[,1]
A<- temp[,2]
B<- temp[,3]
cit.cp(L,A,B)
dataset_linear<- read_data("../../yeast_residual_data_full_1000_gt_1.txt")
temp<-as.data.frame(dataset_linear[[634]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
L<-temp[,1]
A<- temp[,2]
B<- temp[,3]
cit.cp(L,A,B)
plot(A,B)
lm(B~y)
lm(B~A)
df=cbind(L,A,B)
df=as.data.frame(df)
ggplot(df,aes(A,B))+geom_point()+stat_smooth(method="lm")
setwd("~/")
data<- readRDS("result.predict.me.rds")
View(data)
library(R.utils)
install.packages(R.utils)
install_packages(R.utils)
install.packages("R.utils")
L<-rbinom(1000,2,0.5)
L
table(L)
A<- L+rnorm(0,1)
A<- L+rnorm(1000,0,1)
plot(L,A)
boxplot(L,A)
boxplot(L~A)
boxplot(A~L)
B<-A+rnorm(1000,0,1)
plot(A,B)
cit.cp(L,A,B)
library("cit")
cit.cp(L,A,B)
plot(L,A)
B<-A**2+rnorm(1000,0,1)
plot(A,B)
cit.cp(L,A,B)
plot(L~A)
plot(A~L)
plot(B~L)
L<-rbinom(1000,2,0.5)
boxplot(A~L)
A<- 3*L+rnorm(0,1)
boxplot(A~L)
A<- 3*L+rnorm(1000,0,1)
boxplot(A~L)
L<-rbinom(1000,2,0.5)
L[L==2]=-1
plot(L)
A=3*L+rnorm(1000,0,1)
boxplot(A~L)
A=L+rnorm(1000,0,1)
boxplot(A~L)
B<-A**2+rnorm(1000,0,1)
plot(A,B)
cit.cp(L,A,B)
A=3*L+rnorm(1000,0,1)
B<-A**2+rnorm(1000,0,1)
plot(A,B)
cit.cp(L,A,B)
plot(L,B)
load("~/projects/CIT_Non_Linear/debug/debugging.cit.nlmr.Rhist")
df=as.data.frame(cbind(L,A,B))
ggplot(A,B)+geom_point()+stat_smooth(method="lm")
library(ggplot2)
ggplot(A,B)+geom_point()+stat_smooth(method="lm")
ggplot(df,aes(A,B,color=L))+geom_point()+stat_smooth(method="lm")
Bresid=resid(lm(B~A))
ggplot(df,aes(A,B,Bresid,color=L))+geom_point()+stat_smooth(method="lm")
plot(Bresid~A)
plot(Bresid~L)
boxplot(Bresid~L)
L
library(cit)
#inputs=10000
#inputs=62296
#inputs=209157
inputs=121
read_data<-function(path)
{
dataset<- vector("list", inputs)
con = file(path, "r")
for (i in 1:inputs)
{
line = readLines(con, n = 1)
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
l<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
a<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
b<-as.vector(as.numeric(line_edit))
dataset[[i]]<-list(l,a,b)
}
close(con)
return (dataset)
}
dataset_linear<- read_data("../testing_writingvalues_humans.txt")
setwd("~/projects/CIT_Non_Linear/LinearDifferentvalues/CIT_testing")
dataset_linear<- read_data("../testing_writingvalues_humans.txt")
#dataset_yeast<- read_data("../../../yeast_full_data/yeast_residual_data_full_209k_gt2.txt")
#indices_used<-read_pickle_file("../../thirdApproach/indicesUsedIndependent.pkl")
#adding +1 since R is 1 indexed
#indices_used<-indices_used+1
#dataset_linear<- dataset_yeast[indices_used[1:10000]]
#inputs=10000
inputs=121
p_cit<-numeric(inputs)
p_cit[1:inputs]=-1
p_TL<- numeric(inputs)
p_TL[1:inputs]=-1
p_TG<- numeric(inputs)
p_TG[1:inputs]=-1
p_GL<- numeric(inputs)
p_GL[1:inputs]=-1
p_Lind<- numeric(inputs)
p_Lind[1:inputs]=-1
p_res<-character(inputs)
p_res[1:inputs]="NA"
for(i in 1:inputs)
{
print(i)
try(
{
temp<-as.data.frame(dataset_linear[[i]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
L<-temp[,1]
A<- temp[,2]
B<- temp[,3]
t<-cit.cp(L,A,B)
#t<-cit.cp(L,B,A)
p_cit[i]<-t[1]
p_TL[i]<-t[2]
p_TG[i]<-t[3]
p_GL[i]<-t[4]
p_Lind[i]<-t[5]
if( t[1]<0.05)
{
p_res[i]<-"causal"
}
else
p_res[i]<-" "
}
)}
df <- data.frame(p_cit,p_TL,p_TG,p_GL,p_Lind,p_res)
write.csv(df,"result_humans.csv",row.names=FALSE)
View(df)
L<-rbinom(1000,1,0.5)
L<-rbinom(1000,1,0.5)
A<- -5+L+rnorm(1000,0,1)
library(RColorBrewer)
library(dplyr)
library(PRROC)
install.packages("PROC")
install.packages("pROC")
library(pROC)
setwd("~/")
library(pROC)
fi<-readRDS("3.findr.result.cit.ecit.runs.i1.rds")
View(fi)
fa<-readRDS("3.findr.trios.rds")
View(fa)
fi<-readRDS("3.findr.result.cit.ecit.runs.i2.rds")
View(fi)
fi1<-readRDS("3.findr.result.cit.ecit.runs.i1.rds")
fi2<-readRDS("3.findr.result.cit.ecit.runs.i2.rds")
View(fi)
View(fi1)
View(fi2)
fa<-readRDS("3.samples.1..rds")
fa<-readRDS("3.samples.2..rds")
fa<-readRDS("3.samples.2..rds")
fi3<-readRDS("4.findr.result.cit.ecit.runs.i2.rds")
View(fi3)
fi4<-readRDS("findr.result.cit.ecit.runs.i1.ver1.rds")
View(fi4)
fi3<-readRDS("4.findr.result.cit.ecit.runs.i4.rds")
setwd("~/")
fi3<-readRDS("4.findr.result.cit.ecit.runs.i4.rds")
fi3<-readRDS("3.findr.result.cit.ecit.runs.i4.rds")
View(fi3)
fi4<-readRDS("findr.result.cit.ecit.runs.i1.ver1.rds")
fi3<-readRDS("4.findr.result.cit.ecit.runs.i2.rds")
library(cit)
setwd("~/projects/CIT_Non_Linear/LinearDifferentvalues/CIT_testing")
dataset_linear<- read_data("../testing_writingvalues_Linear0to1.txt")
inputs=121
read_data<-function(path)
{
dataset<- vector("list", inputs)
con = file(path, "r")
for (i in 1:inputs)
{
line = readLines(con, n = 1)
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
l<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
a<-as.vector(as.numeric(line_edit))
line = readLines(con, n = 1)
line_edit<-unlist(strsplit(line," "))
b<-as.vector(as.numeric(line_edit))
dataset[[i]]<-list(l,a,b)
}
close(con)
return (dataset)
}
dataset_linear<- read_data("../testing_writingvalues_Linear0to1.txt")
dataset_linear[24]
dataset_linear[[24]]
dataset_linear[[24]][1]
dataset_linear[[24]][2]
dataset_linear[[24]][3]
L<-dataset_linear[[25]][1]
A<-dataset_linear[[25]][2]
B<-dataset_linear[[25]][3]
cit.cp(L,A,B)
A
B
L
cit.cp(L,A,B)
temp<-as.data.frame(dataset_linear[[25]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
L<-temp[,1]
A<-temp[,2]
B<-temp[,3]
cit.cp(L,A,B)
plot(A,B)
temp<-as.data.frame(dataset_linear[[24]],check.rows=FALSE,check.cols=FALSE,col.names=c("L","A","B"))
L<-temp[,1]
A<-temp[,2]
B<-temp[,3]
cit.cp(L,A,B)
plot(A,B)
install.packages("cpi")
library(cpi)
?cpi
library(mlr3)
library(mlr3)
library(mlr3learners)
install.packages("mlr3learners")
library(mlr3learners)
versi
version
cpi(task = tsk("iris"),
learner = lrn("classif.ranger", predict_type = "prob"),
resampling = rsmp("cv", folds = 5),
measure = "classif.logloss", test = "t")
cpi(task = tsk("iris"),
learner = lrn("classif.ranger", predict_type = "prob"),
resampling = rsmp("cv", folds = 5),
measure = "classif.logloss", test = "t")
library(cpi)
cpi(task = tsk("iris"),
learner = lrn("classif.ranger", predict_type = "prob"),
resampling = rsmp("cv", folds = 5),
measure = "classif.logloss", test = "t")
